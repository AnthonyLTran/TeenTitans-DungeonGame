package com.company;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {
    private static ArrayList<String> roomRawData;
    private static ArrayList<Room> rooms;
    private static Room currentRoom;
    private static Scanner keyboard;

    private static boolean endFlag=false;
    private static Room nextRoom;
    private static int commandType=1;//0:invalid,1:valid,2:help
    private static String currentCommand;
    private static int currentRoomID;
    private static int nextRoomID=0;

    public static void main(String[] args) {
	// write your code here

        initialization();
        do{

            process();
        }while(!endFlag);
        end();
        System.exit(0);
    }
    //initialization of the game
    public static void initialization(){
        keyboard=new Scanner(System.in);
        roomRawData= new ArrayList<>();

        //reading the game data
        getRoomDataFromFile();
        System.out.println("RoomRawData : " +roomRawData);


        //processing to create room data
        processRawRoomData();
        System.out.println("Room Data" + rooms);

        //display the first room
        currentRoom=rooms.get(0);
        System.out.println("Welcome to Adventure Game Haunted Mansion!!!");
        System.out.println("You are at Room 1.");

        rooms.get(0).setVisted(true);


    }




    private static void process() {


        String command=getCommand();
        nextRoom=getRoom(command);

        switch(commandType){

            case 0:
                System.out.print("You canâ€™t go this way.\n");
                break;
            case 1:
                currentRoom=nextRoom;
                displayCurrentRoom();
                break;
            case 2 :
                displayHelp();
                break;
            case 3:


                System.out.print("Are you sure you want to Quit? (Y/N) : ");
                String choice = keyboard.nextLine();
                choice = choice.toUpperCase();
                if(choice.compareTo("Y")==0 || choice.compareTo("YES")==0){

                    endFlag=true;

                }
                break;
            default:
                System.out.print("Invalid command.\n");
                break;
        }


    }




    private static void getRoomDataFromFile() {

        try {
            File roomFile = new File("Room.txt");
            Scanner myReader = new Scanner(roomFile);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                roomRawData.add(data);

//                System.out.println(data);
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    private static void processRawRoomData() {

        rooms = new ArrayList<Room>();
        for(int i=0;i<roomRawData.size();i++){
            Room room=new Room();
            HashMap<String,Integer> navData= new HashMap<>();
            StringTokenizer st = new StringTokenizer(roomRawData.get(i),",");
            while (st.hasMoreTokens()) {
                room.setRoomID(Integer.parseInt(st.nextToken()));
                room.setRoomDescription(st.nextToken());
                //Navigation Table
                navData = new HashMap<>();
                navData.put("NORTH",Integer.parseInt(st.nextToken()));
                navData.put("EAST",Integer.parseInt(st.nextToken()));
                navData.put("SOUTH",Integer.parseInt(st.nextToken()));
                navData.put("WEST",Integer.parseInt(st.nextToken()));
            }
            //The room is not visited yet.
            room.setVisted(false);



            room.setNavTable(navData);
            rooms.add(room);
        }
    }


    private static String getCommand() {

        System.out.print("Which direction do you want to go? (N,S,E,W)\n>");
        String command=keyboard.nextLine();


        return command;
    }
    private static Room getRoom(String command) {
        HashMap<String, Integer> navTable = currentRoom.getNavTable();

        commandType=0;
        command=command.toUpperCase();
        if((command.toUpperCase().compareTo("N") ==0)||
                (command.toUpperCase().compareTo("NORTH") ==0)){
            //int roomID= navTable.get("NORTH");
            nextRoomID= navTable.get("NORTH");
            commandType= (nextRoomID!=0)?1:0;
            //System.out.println("Current Room ID : "+roomID +"> ");
//            if(roomID!=0){
//                commandType=1;
//                return rooms.get(roomID-1);
//            }

        }else if((command.toUpperCase().compareTo("S") ==0)||
                (command.toUpperCase().compareTo("SOUTH") ==0)){
            int roomID= navTable.get("SOUTH");
            //System.out.println("Current Room ID : "+roomID +"> ");
            if(roomID!=0){
                commandType=1;
                return rooms.get(roomID-1);
            }

        }else
        if((command.toUpperCase().compareTo("E") ==0)||
                (command.toUpperCase().compareTo("EAST") ==0)){
            int roomID= navTable.get("EAST");
            //System.out.println("Current Room ID : "+roomID +"> ");
            if(roomID!=0){
                commandType=1;
                return rooms.get(roomID-1);
            }

        }else
        if((command.toUpperCase().compareTo("W") ==0)||
                (command.toUpperCase().compareTo("WEST") ==0)){
            int roomID= navTable.get("WEST");
            //System.out.println("Current Room ID : "+roomID +"> ");
            if(roomID!=0){
                commandType=1;
                return rooms.get(roomID-1);
            }

        }else

        if((command.toUpperCase().compareTo("Q") ==0)||
                (command.toUpperCase().compareTo("QUIT") ==0)){

            commandType=3;

        }else
        if((command.toUpperCase().compareTo("H") ==0)||
                (command.toUpperCase().compareTo("HELP") ==0)){
            //displayHelp();
            commandType=2;
            //return currentRoom;

        }else {

            commandType = -1;
        }
        return currentRoom;
    }



    private static void end() {
        System.out.println("Thanks for playing....");
    }
    private static void displayCurrentRoom() {

        if(nextRoomID==0){
            return;
        }
        currentRoom=rooms.get(nextRoomID-1);

        if(currentRoom.isVisted()){
            System.out.println("This look familiar");
        }
        else{
            currentRoom.setVisted(true);
        }
        System.out.println("You are at Room "+currentRoom.getRoomID());
        //System.out.print("Which direction do you want to go? (N,S,E,W)\n>");
    }

    private static void displayHelp() {

        String helpStr="";
        HashMap<String,Integer> navTable=currentRoom.getNavTable();

        System.out.println("The moves are : " + navTable);

    }
}
